{"ast":null,"code":"var _jsxFileName = \"/Users/jamesupchurch/Documents/projects/tower/client/src/components/app/mydatasets/dataset/dataset.js\";\nimport Data from '../../../../db/db.json';\nimport { React, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Paper, Typography } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet columns = [{\n  title: \"id\",\n  field: \"id\",\n  hidden: true\n}, {\n  title: \"id_File\",\n  field: \"id_File\",\n  width: 150\n}, {\n  title: \"id_DataSet\",\n  field: \"id_DataSet\",\n  width: 150\n}, {\n  title: \"startTime\",\n  field: \"startTime\",\n  width: 150\n}, {\n  title: \"duration\",\n  field: \"duration\",\n  width: 150\n}, {\n  title: \"id_DataType\",\n  field: \"id_DataType\",\n  width: 170\n}];\n\nclass DataSet extends Component {\n  constructor(props) {\n    super(props);\n\n    this.bindDataGrid = data => {\n      console.log('Binding: ');\n      console.log(data);\n      let rows = data.map(dataSet => {\n        let row = {\n          id: dataSet.id,\n          id_File\n        };\n        return row;\n      });\n      this.setState({\n        gridData: {\n          rows\n        }\n      });\n    };\n\n    this.state = {\n      dataSet: null,\n      gridData: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.getDataSetData(id);\n  }\n\n  async getDataSetData(id) {\n    var idDataSet = parseInt(id);\n    var url = 'http://localhost:8000';\n    var endpoint = '/DataSet/' + id;\n    let data;\n    await Axios.get(url + endpoint).then(res => {\n      console.log(res);\n      data = res.data;\n    });\n    let formattedData = data.map((dataSet, index) => {\n      return {\n        dataSet,\n        id: index\n      };\n    });\n    this.setState({\n      dataSet: formattedData\n    });\n    this.bindDataGrid(formattedData);\n  }\n\n  render() {\n    const {\n      dataSet,\n      gridData\n    } = this.state;\n    let emptyRow = {\n      id: 0,\n      id_File: \"\",\n      id_DataSet: \"\",\n      startTime: \"\",\n      duration: \"\",\n      id_DataType: \"\"\n    };\n    const rows = gridData !== null ? gridData.rows : [emptyRow];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DataSet\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Displaying Data Set \", dataSet !== null ? this.state.dataSet.name : 'null', \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is where a dataset table will go, listing any data points that have been labeled. Also, maybe it will have a list of files included? IDK yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        style: {\n          height: '500px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Labeled Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: rows,\n          columns: columns,\n          checkBoxSelection: true,\n          disableSelectionOnClick: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(DataSet);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/jamesupchurch/Documents/projects/tower/client/src/components/app/mydatasets/dataset/dataset.js"],"names":["Data","React","Component","withRouter","Paper","Typography","DataGrid","Axios","columns","title","field","hidden","width","DataSet","constructor","props","bindDataGrid","data","console","log","rows","map","dataSet","row","id","id_File","setState","gridData","state","componentDidMount","match","params","getDataSetData","idDataSet","parseInt","url","endpoint","get","then","res","formattedData","index","render","emptyRow","id_DataSet","startTime","duration","id_DataType","name","height"],"mappings":"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","sourcesContent":["import Data from '../../../../db/db.json'\nimport { React, Component } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { Paper, Typography } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid'\nimport Axios from 'axios';\n\nlet columns = [\n        { title: \"id\",          field: \"id\",            hidden: true },\n        { title: \"id_File\",     field: \"id_File\",       width: 150 },\n        { title: \"id_DataSet\",  field: \"id_DataSet\",    width: 150 },\n        { title: \"startTime\",   field: \"startTime\",     width: 150 },\n        { title: \"duration\",    field: \"duration\",      width: 150 },\n        { title: \"id_DataType\", field: \"id_DataType\",   width: 170 }\n    ];\n\nclass DataSet extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataSet: null,\n            gridData: null\n        }\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.getDataSetData(id);\n    }\n\n    async getDataSetData(id) {\n        var idDataSet = parseInt(id);\n\n        var url = 'http://localhost:8000';\n        var endpoint = '/DataSet/' + id;\n\n        let data;\n\n        await Axios.get(url + endpoint)\n            .then(res => {\n                console.log(res);\n                data = res.data;\n            });\n\n        let formattedData = data.map((dataSet, index) => { return { dataSet, id: index }; });\n\n        this.setState({ dataSet: formattedData });\n        this.bindDataGrid(formattedData);\n    }\n\n    bindDataGrid = (data) => {\n        console.log('Binding: ');\n        console.log(data);\n\n        let rows = data.map((dataSet) => {\n            let row = {\n                id: dataSet.id,\n                id_File\n            };\n\n            return row;\n        });\n\n        this.setState({ gridData: { rows }});\n    }\n\n    render() {\n        const { dataSet, gridData } = this.state;\n\n        let emptyRow = {\n            id: 0,\n            id_File: \"\",\n            id_DataSet: \"\",\n            startTime: \"\",\n            duration: \"\",\n            id_DataType: \"\"\n        }\n\n        const rows = gridData !== null ? gridData.rows : [emptyRow];\n\n        return (\n            <div className=\"DataSet\">\n                <p>Displaying Data Set {dataSet !== null ? this.state.dataSet.name : 'null'}...</p>\n                <p>This is where a dataset table will go, listing any data points that have been labeled. Also, maybe it will have a list of files included? IDK yet.</p>\n                <Paper style={{ height: '500px' }}>\n                    <Typography variant=\"h6\">Labeled Data</Typography>\n                    <DataGrid \n                        rows={rows}\n                        columns={columns}\n                        checkBoxSelection\n                        disableSelectionOnClick\n                    />\n                </Paper>\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(DataSet);"]},"metadata":{},"sourceType":"module"}