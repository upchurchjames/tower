{"ast":null,"code":"var _jsxFileName = \"/Users/jamesupchurch/Documents/projects/tower/client/src/components/app/mydatasets/dataset/dataset.js\";\nimport Data from '../../../../db/db.json';\nimport { React, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DataSet extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataSet: null\n    };\n\n    this.getDataSet = id => {\n      console.log('this is my ds: ' + id);\n\n      for (var ds in Data.dataSets) {\n        console.log(Data.dataSets[ds]);\n\n        if (Data.dataSets[ds].ObjectID === id) {\n          console.log('I GOT IT HERE');\n          this.setState({\n            dataSet: ds\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      id\n    } = this.props.match.params;\n    this.getDataSet(id);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DataSet\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Showing \", this.state.dataSet.name, \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is where a dataset table will go, listing any data points that have been labeled. Also, maybe it will have a list of files included? IDK yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(DataSet);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/jamesupchurch/Documents/projects/tower/client/src/components/app/mydatasets/dataset/dataset.js"],"names":["Data","React","Component","withRouter","DataSet","state","dataSet","getDataSet","id","console","log","ds","dataSets","ObjectID","setState","render","props","match","params","name"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,wBAAjB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC5BG,KAD4B,GACpB;AACJC,MAAAA,OAAO,EAAE;AADL,KADoB;;AAAA,SAK5BC,UAL4B,GAKdC,EAAD,IAAQ;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBF,EAAhC;;AAEA,WAAK,IAAIG,EAAT,IAAeX,IAAI,CAACY,QAApB,EAA8B;AAC1BH,QAAAA,OAAO,CAACC,GAAR,CAAYV,IAAI,CAACY,QAAL,CAAcD,EAAd,CAAZ;;AACA,YAAIX,IAAI,CAACY,QAAL,CAAcD,EAAd,EAAkBE,QAAlB,KAA+BL,EAAnC,EAAuC;AACnCC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,eAAKI,QAAL,CAAc;AAAER,YAAAA,OAAO,EAAEK;AAAX,WAAd;AACH;AACJ;AACJ,KAf2B;AAAA;;AAiB5BI,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEP,MAAAA;AAAF,QAAS,KAAKQ,KAAL,CAAWC,KAAX,CAAiBC,MAAhC;AAEA,SAAKX,UAAL,CAAgBC,EAAhB;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAA,+BAAY,KAAKH,KAAL,CAAWC,OAAX,CAAmBa,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AA5B2B;;AA+BhC,oBAAehB,UAAU,CAACC,OAAD,CAAzB","sourcesContent":["import Data from '../../../../db/db.json'\nimport { React, Component } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nclass DataSet extends Component {\n    state = {\n        dataSet: null\n    }\n\n    getDataSet = (id) => {\n        console.log('this is my ds: ' + id);\n\n        for (var ds in Data.dataSets) {\n            console.log(Data.dataSets[ds]);\n            if (Data.dataSets[ds].ObjectID === id) {\n                console.log('I GOT IT HERE')\n                this.setState({ dataSet: ds });\n            }\n        }\n    }\n\n    render() {\n        const { id } = this.props.match.params;\n\n        this.getDataSet(id);\n\n        return (\n            <div className=\"DataSet\">\n                <p>Showing {this.state.dataSet.name}...</p>\n                <p>This is where a dataset table will go, listing any data points that have been labeled. Also, maybe it will have a list of files included? IDK yet.</p>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(DataSet);"]},"metadata":{},"sourceType":"module"}