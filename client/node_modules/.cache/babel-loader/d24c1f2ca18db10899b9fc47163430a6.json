{"ast":null,"code":"var _jsxFileName = \"/Users/jamesupchurch/Documents/projects/tower/client/src/components/app/mydatasets/dataset/dataset.js\";\nimport Data from '../../../../db/db.json';\nimport { React, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Paper, Typography } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DataSet extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getDataSetData = id => {\n      var idDataSet = parseInt(id);\n      var url = 'http://localhost:8000';\n      var endpoint = '/DataSet/' + id;\n      let data;\n      Axios.get(url + endpoint).then(res => {\n        console.log(res);\n        data = res.data;\n        this.setState({\n          dataSet: data\n        });\n        this.bindDataGrid(data);\n      });\n    };\n\n    this.bindDataGrid = data => {\n      console.log('Binding: ' + data);\n      let rows = Data.dataLabels;\n      let columns = [{\n        title: \"id\",\n        field: \"id\",\n        hidden: true\n      }, {\n        title: \"id_File\",\n        field: \"id_File\",\n        width: 150\n      }, {\n        title: \"id_DataSet\",\n        field: \"id_DataSet\",\n        width: 150\n      }, {\n        title: \"startTime\",\n        field: \"startTime\",\n        width: 150\n      }, {\n        title: \"duration\",\n        field: \"duration\",\n        width: 150\n      }, {\n        title: \"id_DataType\",\n        field: \"id_DataType\",\n        width: 170\n      }];\n      this.setState({\n        gridData: {\n          rows,\n          columns\n        }\n      });\n    };\n\n    this.state = {\n      dataSet: null,\n      gridData: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.getDataSetData(id);\n  }\n\n  render() {\n    const {\n      dataSet,\n      gridData\n    } = this.state;\n    const rows = gridData !== null ? gridData.rows : null;\n    const columns = gridData !== null ? gridData.columns : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DataSet\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Displaying Data Set \", dataSet !== null ? this.state.dataSet.name : 'null', \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is where a dataset table will go, listing any data points that have been labeled. Also, maybe it will have a list of files included? IDK yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        style: {\n          height: '500px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Labeled Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: rows,\n          columns: columns,\n          checkBoxSelection: true,\n          disableSelectionOnClick: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(DataSet);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/jamesupchurch/Documents/projects/tower/client/src/components/app/mydatasets/dataset/dataset.js"],"names":["Data","React","Component","withRouter","Paper","Typography","DataGrid","Axios","DataSet","constructor","props","getDataSetData","id","idDataSet","parseInt","url","endpoint","data","get","then","res","console","log","setState","dataSet","bindDataGrid","rows","dataLabels","columns","title","field","hidden","width","gridData","state","componentDidMount","match","params","render","name","height"],"mappings":"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","sourcesContent":["import Data from '../../../../db/db.json'\nimport { React, Component } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { Paper, Typography } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid'\nimport Axios from 'axios';\n\nclass DataSet extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataSet: null,\n            gridData: null\n        }\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.getDataSetData(id);\n    }\n\n    getDataSetData = (id) => {\n        var idDataSet = parseInt(id);\n\n        var url = 'http://localhost:8000';\n        var endpoint = '/DataSet/' + id;\n\n        let data;\n\n        Axios.get(url + endpoint)\n            .then(res => {\n                console.log(res);\n                data = res.data;\n\n                this.setState({ dataSet: data });\n                this.bindDataGrid(data);\n            });\n    }\n\n    bindDataGrid = (data) => {\n        console.log('Binding: ' + data);\n\n        let rows = Data.dataLabels;\n        let columns = [\n            { title: \"id\",          field: \"id\",            hidden: true },\n            { title: \"id_File\",     field: \"id_File\",       width: 150 },\n            { title: \"id_DataSet\",  field: \"id_DataSet\",    width: 150 },\n            { title: \"startTime\",   field: \"startTime\",     width: 150 },\n            { title: \"duration\",    field: \"duration\",      width: 150 },\n            { title: \"id_DataType\", field: \"id_DataType\",   width: 170 }\n        ];\n\n        this.setState({ gridData: { rows, columns }});\n    }\n\n    render() {\n        const { dataSet, gridData } = this.state;\n\n        const rows = gridData !== null ? gridData.rows : null;\n        const columns = gridData !== null ? gridData.columns : null;\n\n        return (\n            <div className=\"DataSet\">\n                <p>Displaying Data Set {dataSet !== null ? this.state.dataSet.name : 'null'}...</p>\n                <p>This is where a dataset table will go, listing any data points that have been labeled. Also, maybe it will have a list of files included? IDK yet.</p>\n                <Paper style={{ height: '500px' }}>\n                    <Typography variant=\"h6\">Labeled Data</Typography>\n                    <DataGrid \n                        rows={rows}\n                        columns={columns}\n                        checkBoxSelection\n                        disableSelectionOnClick\n                    />\n                </Paper>\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(DataSet);"]},"metadata":{},"sourceType":"module"}