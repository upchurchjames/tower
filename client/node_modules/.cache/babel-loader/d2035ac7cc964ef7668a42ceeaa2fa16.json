{"ast":null,"code":"var _jsxFileName = \"/Users/jamesupchurch/Documents/projects/tower/client/src/components/app/mydatasets/dataset/dataset.js\";\nimport Data from '../../../../db/db.json';\nimport { React, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DataSet extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getDataSet = id => {\n      var idDataSet = parseInt(id);\n\n      for (var ds in Data.dataSets) {\n        if (Data.dataSets[ds].ObjectID === idDataSet) {\n          this.setState({\n            dataSet: Data.dataSets[idDataSet]\n          });\n        }\n      }\n    };\n\n    this.state = {\n      dataSet: null\n    };\n    this.getDataSet(this.props.match.params.id);\n  }\n\n  render() {\n    const {\n      id\n    } = this.props.match.params;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DataSet\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.dataSet.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is where a dataset table will go, listing any data points that have been labeled. Also, maybe it will have a list of files included? IDK yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(DataSet);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/jamesupchurch/Documents/projects/tower/client/src/components/app/mydatasets/dataset/dataset.js"],"names":["Data","React","Component","withRouter","DataSet","constructor","props","getDataSet","id","idDataSet","parseInt","ds","dataSets","ObjectID","setState","dataSet","state","match","params","render","name"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,wBAAjB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAC5BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,UAVmB,GAULC,EAAD,IAAQ;AACjB,UAAIC,SAAS,GAAGC,QAAQ,CAACF,EAAD,CAAxB;;AACA,WAAK,IAAIG,EAAT,IAAeX,IAAI,CAACY,QAApB,EAA8B;AAC1B,YAAIZ,IAAI,CAACY,QAAL,CAAcD,EAAd,EAAkBE,QAAlB,KAA+BJ,SAAnC,EAA8C;AAC1C,eAAKK,QAAL,CAAc;AAAEC,YAAAA,OAAO,EAAEf,IAAI,CAACY,QAAL,CAAcH,SAAd;AAAX,WAAd;AACH;AACJ;AACJ,KAjBkB;;AAGf,SAAKO,KAAL,GAAa;AACTD,MAAAA,OAAO,EAAE;AADA,KAAb;AAIA,SAAKR,UAAL,CAAgB,KAAKD,KAAL,CAAWW,KAAX,CAAiBC,MAAjB,CAAwBV,EAAxC;AACH;;AAWDW,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEX,MAAAA;AAAF,QAAS,KAAKF,KAAL,CAAWW,KAAX,CAAiBC,MAAhC;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAA,kBAAI,KAAKF,KAAL,CAAWD,OAAX,CAAmBK;AAAvB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AA7B2B;;AAgChC,oBAAejB,UAAU,CAACC,OAAD,CAAzB","sourcesContent":["import Data from '../../../../db/db.json'\nimport { React, Component } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nclass DataSet extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataSet: null,\n        }\n\n        this.getDataSet(this.props.match.params.id);\n    }\n\n    getDataSet = (id) => {\n        var idDataSet = parseInt(id);\n        for (var ds in Data.dataSets) {\n            if (Data.dataSets[ds].ObjectID === idDataSet) {\n                this.setState({ dataSet: Data.dataSets[idDataSet] });\n            }\n        }\n    }\n\n    render() {\n        const { id } = this.props.match.params;\n\n        return (\n            <div className=\"DataSet\">\n                <p>{this.state.dataSet.name}</p>\n                <p>This is where a dataset table will go, listing any data points that have been labeled. Also, maybe it will have a list of files included? IDK yet.</p>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(DataSet);"]},"metadata":{},"sourceType":"module"}