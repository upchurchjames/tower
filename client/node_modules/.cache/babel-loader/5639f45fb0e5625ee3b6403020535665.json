{"ast":null,"code":"var _jsxFileName = \"/Users/jamesupchurch/Documents/projects/tower/client/src/components/app/mydatasets/dataset/dataset.js\";\nimport Data from '../../../../db/db.json';\nimport { React, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Paper, Typography } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DataSet extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getDataSet = id => {\n      var idDataSet = parseInt(id);\n\n      for (var ds in Data.dataSets) {\n        if (Data.dataSets[ds].ObjectID === idDataSet) {\n          this.setState({\n            dataSet: Data.dataSets[idDataSet]\n          });\n        }\n      }\n    };\n\n    this.bindDataGrid = () => {\n      let rows = Data.dataLabels;\n      let columns = [{\n        title: \"id\",\n        field: \"id\",\n        hidden: true\n      }, {\n        title: \"id_File\",\n        field: \"id_File\",\n        width: 150\n      }, {\n        title: \"id_DataSet\",\n        field: \"id_DataSet\",\n        width: 150\n      }, {\n        title: \"startTime\",\n        field: \"startTime\",\n        width: 150\n      }, {\n        title: \"duration\",\n        field: \"duration\",\n        width: 150\n      }, {\n        title: \"id_DataType\",\n        field: \"id_DataType\",\n        width: 170\n      }];\n      return {\n        rows: rows,\n        columns: columns\n      };\n    };\n\n    this.state = {\n      dataSet: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.getDataSet(id);\n  }\n\n  render() {\n    const {\n      dataSet\n    } = this.state;\n    const data = this.bindDataGrid();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DataSet\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Displaying Data Set \", dataSet !== null ? this.state.dataSet.name : 'null', \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is where a dataset table will go, listing any data points that have been labeled. Also, maybe it will have a list of files included? IDK yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        style: {\n          height: '500px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Labeled Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: data.rows,\n          columns: data.columns,\n          checkBoxSelection: true,\n          disableSelectionOnClick: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(DataSet);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/jamesupchurch/Documents/projects/tower/client/src/components/app/mydatasets/dataset/dataset.js"],"names":["Data","React","Component","withRouter","Paper","Typography","DataGrid","DataSet","constructor","props","getDataSet","id","idDataSet","parseInt","ds","dataSets","ObjectID","setState","dataSet","bindDataGrid","rows","dataLabels","columns","title","field","hidden","width","state","componentDidMount","match","params","render","data","name","height"],"mappings":"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","sourcesContent":["import Data from '../../../../db/db.json'\nimport { React, Component } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { Paper, Typography } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid'\n\nclass DataSet extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataSet: null,\n        }\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.getDataSet(id);\n    }\n\n    getDataSet = (id) => {\n        var idDataSet = parseInt(id);\n        for (var ds in Data.dataSets) {\n            if (Data.dataSets[ds].ObjectID === idDataSet) {\n                this.setState({ dataSet: Data.dataSets[idDataSet] });\n            }\n        }\n    }\n\n    bindDataGrid = () => {\n        let rows = Data.dataLabels;\n        let columns = [\n            { title: \"id\",          field: \"id\",            hidden: true },\n            { title: \"id_File\",     field: \"id_File\",       width: 150 },\n            { title: \"id_DataSet\",  field: \"id_DataSet\",    width: 150 },\n            { title: \"startTime\",   field: \"startTime\",     width: 150 },\n            { title: \"duration\",    field: \"duration\",      width: 150 },\n            { title: \"id_DataType\", field: \"id_DataType\",   width: 170 }\n        ];\n\n        return { rows: rows, columns: columns };\n    }\n\n    render() {\n        const { dataSet } = this.state;\n\n        const data = this.bindDataGrid();\n\n        return (\n            <div className=\"DataSet\">\n                <p>Displaying Data Set {dataSet !== null ? this.state.dataSet.name : 'null'}...</p>\n                <p>This is where a dataset table will go, listing any data points that have been labeled. Also, maybe it will have a list of files included? IDK yet.</p>\n                <Paper style={{ height: '500px' }}>\n                    <Typography variant=\"h6\">Labeled Data</Typography>\n                    <DataGrid \n                        rows={data.rows}\n                        columns={data.columns}\n                        checkBoxSelection\n                        disableSelectionOnClick\n                    />\n                </Paper>\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(DataSet);"]},"metadata":{},"sourceType":"module"}